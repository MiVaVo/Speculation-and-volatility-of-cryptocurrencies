sum(percentages[1:4,])
grouped
sum(percentages[1:6,])
percentages
sum(percentages[1:6,])
sum(percentages[1:6,]) #### FIRST 6 currencies account for 60% of total crypto market cap
grouped[1:5,1]
c(grouped[1:5,1])
typeof(c(grouped[1:5,1]))
type(c(grouped[1:5,1])
type(c(grouped[1:5,1]))
c(grouped[1:5,1])
as.list(c(grouped[1:5,1]))
df_of_interes=as.list(c(grouped[1:5,1]))
as.character(c(grouped[1:5,1]))
lapply(c(grouped[1:5,1]), as.character)
df_of_interes=lapply(c(grouped[1:5,1]), as.character)
View(df_of_interes)
df_of_interes
df_new[,'name']
grouped
df_new[,'name']==df_of_interes$name
df_new[df_new[,'name']==df_of_interes$name,]
named_of_cryptos=lapply(c(grouped[1:5,1]), as.character)
df_to_work_with=df_new[df_new[,'name']==named_of_cryptos$name,]
View(df_to_work_with)
df_to_work_with
is.nan(df_to_work_with)
View(df_to_work_with)
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
# df_new=df_new[df_new[,'name']=='Bitcoin' | df_new[,'name']=='Ethereum',]
# logturnover=log(df_new['volume']+0.00000255)
grouped=group_by(df_new, name) %>%
summarise(mean=mean(market), sd=sd(market))
grouped=grouped[ order(-grouped[,2]), ]
percentages=grouped['mean']/sum(grouped[,2])
sum(percentages[1:6,]) #### FIRST 6 currencies account for 60% of total crypto market cap
named_of_cryptos=lapply(c(grouped[1:5,1]), as.character)
df_to_work_with=df_new[df_new[,'name']==named_of_cryptos$name,]
df_to_work_with
df_to_work_with
df_to_work_with
head(df_to_work_with)
df_to_work_with
write.csv(df_to_work_with, file = "df_to_work_with.csv")
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
named_of_cryptos=lapply(c(grouped[1:5,1]), as.character)
df_to_work_with=df_new[df_new[,'name']==named_of_cryptos$name,]
write.csv(df_to_work_with, file = "df_to_work_with.csv")
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
named_of_cryptos=lapply(c(grouped[1:5,1]), as.character)
df_to_work_with=df_new[df_new[,'name']==named_of_cryptos$name,]
write.csv(df_to_work_with, file = "df_to_work_with.csv")
named_of_cryptos$name
df_new[,'name'] in named_of_cryptos$name
df_new[,'name']==named_of_cryptos$name
df_to_work_with
df_new
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
named_of_cryptos
named_of_cryptos$name
df_to_work_with_2=df_new[df_new[,'name']=='Bitcoin',]
df_to_work_with_2
dim(df_to_work_with_2)
named_of_cryptos$name
df_new[,'name']
df_new[,'name'] named_of_cryptos$name
df_new[,'name'] %in% named_of_cryptos$name
df_to_work_with=df_new[df_new[,'name'] %in% named_of_cryptos$name,]
df_to_work_with
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
grouped=group_by(df_new, name) %>%
summarise(mean=mean(market), sd=sd(market))
grouped=grouped[ order(-grouped[,2]), ]
percentages=grouped['mean']/sum(grouped[,2])
sum(percentages[1:6,]) #### FIRST 6 currencies account for 60% of total crypto market cap
named_of_cryptos=lapply(c(grouped[1:5,1]), as.character)
df_to_work_with=df_new[df_new[,'name'] %in% named_of_cryptos$name,]
# df_to_work_with_2=df_new[df_new[,'name']=='Bitcoin',]
write.csv(df_to_work_with, file = "df_to_work_with.csv")
percentages
grouped
sum(percentages[1:6,])
lapply(c(grouped[1:5,1]), as.character)
df_new[,'name'] %in% c("Bitcoin",
"Ethereum",
"Ripple")
sum(grouped[,2]
sum(grouped[,2])
sum(grouped[,2])
percentages[1:6,]
df_to_work_with_2=df_new[df_new[,'name'] %in% c("Bitcoin",
"Ethereum",
"Ripple"),]
df_to_work_with_2
sum(percentages[1:6,]) #### FIRST 6 currencies account for 60% of total crypto market cap
df_to_work_with_2
View(df_to_work_with_2)
df_to_work_with_2['market']
df_new['market']
sum(df_new['market'])
sum(df_to_work_with_2['market'])/sum(df_new['market'])
sum(df_to_work_with_2['market'])
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
grouped=group_by(df_new, name) %>%
summarise(mean=mean(market), sd=sd(market))
grouped=grouped[ order(-grouped[,2]), ]
percentages=grouped['mean']/sum(grouped[,2])
sum(percentages[1:6,]) #### FIRST 6 currencies account for 60% of total crypto market cap
named_of_cryptos=lapply(c(grouped[1:5,1]), as.character)
# df_to_work_with=df_new[df_new[,'name'] %in% named_of_cryptos$name,]
df_to_work_with_2=df_new[df_new[,'name'] %in% c("Bitcoin",
"Ethereum",
"Ripple"),]
sum(df_to_work_with_2['market'])/sum(df_new['market'])
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
grouped=group_by(df_new, name) %>%
summarise(sum=sum(market), sd=sd(market))
grouped[ order(-grouped[,2]), ]
grouped=grouped[ order(-grouped[,2]), ]
percentages=grouped['mean']/sum(grouped[,2])
percentages=grouped['sum']/sum(grouped[,2])
percentages
sum(percentages[1:6,]) #### FIRST 6 currencies account for 60% of total crypto market cap
sum(percentages[1:3,]) #### FIRST 6 currencies account for 60% of total crypto market cap
library(forecast)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
grouped=group_by(df_new, name) %>%
summarise(sum=sum(market), sd=sd(market))
grouped=grouped[ order(-grouped[,2]), ]
percentages=grouped['sum']/sum(grouped[,2])
sum(percentages[1:3,]) #### FIRST 3 currencies account for 72% of total market cap
named_of_cryptos=lapply(c(grouped[1:5,1]), as.character)
# df_to_work_with=df_new[df_new[,'name'] %in% named_of_cryptos$name,]
df_to_work_with_2=df_new[df_new[,'name'] %in% c("Bitcoin",
"Ethereum",
"Ripple"),]
# sum(df_to_work_with_2['market'])/sum(df_new['market'])
write.csv(df_to_work_with_2, file = "df_to_work_with_2.csv")
df_to_work_with_2
dim(df_to_work_with_2)
Sys.setenv(PATH="%PATH%;C:/Rtools/gcc-4.6.3/bin;c:/Rtools/bin")
library(forecast)
library(quantmod)
library(dplyr)
library(psych )
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('all-crypto-currencies/crypto-markets.csv')
unique(df[,'name'])
df_new=df[c('name','date','open','high','low','close','volume','market')]
grouped=group_by(df_new, name) %>%
summarise(sum=sum(market), sd=sd(market))
grouped=grouped[ order(-grouped[,2]), ]
percentages=grouped['sum']/sum(grouped[,2])
sum(percentages[1:3,]) #### FIRST 3 currencies account for 72% of total market cap
named_of_cryptos=lapply(c(grouped[1:5,1]), as.character)
# df_to_work_with=df_new[df_new[,'name'] %in% named_of_cryptos$name,]
df_to_work_with_2=df_new[df_new[,'name'] %in% c("Bitcoin",
"Ethereum",
"Ripple"),]
# sum(df_to_work_with_2['market'])/sum(df_new['market'])
write.csv(df_to_work_with_2, file = "df_to_prepare_for_multiple_analysis.csv")
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('df_prepared_for_multiple_analysis.csv')
df
as.Date(df$date)
df$date=as.Date(df$date)
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df_new=read.csv('df_prepared_for_multiple_analysis.csv')
df_new$date=as.POSIXct(as.Date(df_new$date))
df_new$date
df_new.sh
dim(df_new)
qxts <- xts(df_new[,-1], order.by=as.POSIXct(df_new$date))
columns(qxts)
colnames(qxts)
tsdisplay(df_new$RV_Ripple)
dim(df_new)[1]
df_new[seq(50,dim(df_new)[1],1),]
seq(50,dim(df_new)[1],1)
dim(df_new)
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('df_prepared_for_multiple_analysis.csv')
df$date=as.POSIXct(as.Date(df$date))
df_new=df[seq(50,dim(df)[1],1),]
dim(df_new)
View(df)
View(df_new)
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('df_prepared_for_multiple_analysis.csv')
df$date=as.POSIXct(as.Date(df$date))
df_new=df[seq(51,dim(df)[1],1),]
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('df_prepared_for_multiple_analysis.csv')
df$date=as.POSIXct(as.Date(df$date))
df_new=df[seq(51,dim(df)[1],1),]
# df_new=as.matrix(df_new)
qxts <- xts(df_new[,-1], order.by=as.POSIXct(df_new$date))
qxts
qxts.shape
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('df_prepared_for_multiple_analysis.csv')
df$date=as.POSIXct(as.Date(df$date))
df_new=df[seq(51,dim(df)[1],1),]
# df_new=as.matrix(df_new)
qxts <- xts(df_new[,-1], order.by=as.POSIXct(df_new$date))
qxts
colnames(qxts)
tsdisplay(df_new$RV_Ripple)
View(df_new)
df_new[,c(1,2,3)]
df_new[,c(2,3,4)]
g1=ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1,1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model  = list(armaOrder = c(1,1),
arfima =TRUE,include.mean = FALSE,
external.regressors = matrix(df_new[,c(2,3,4)])),
distribution.model = "std")
g1fit=ugarchfit(g1,data=qxts$R_Bitcoin)
summary(g1fit)
matrix(df_new[,c(2,3,4)])
matrix(df_new[,c(2,3,4)])
matrix(df_new$R_Ripple)
as.matrix(df_new$R_Ripple)
g1=ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1,1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model  = list(armaOrder = c(1,1),
arfima =TRUE,include.mean = FALSE,
external.regressors = as.matrix(df_new[,c(2,3,4)])),
distribution.model = "std")
g1fit=ugarchfit(g1,data=qxts$R_Bitcoin)
summary(g1fit)
g1fit
windows()
plot(g1fit,which='all')
df_new[,c(2)]
as.matrix(df_new[,c(2)])
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('df_prepared_for_multiple_analysis.csv')
df$date=as.POSIXct(as.Date(df$date))
df_new=df[seq(51,dim(df)[1],1),]
# df_new=as.matrix(df_new)
qxts <- xts(df_new[,-1], order.by=as.POSIXct(df_new$date))
colnames(qxts)
tsdisplay(df_new$RV_Ripple)
# model = auto.arima(df_new$R,xreg = df_new$mixed_variable,
#                    max.p = 7,
#                    max.q = 7,stepwise = FALSE)
# arima(df_new$R,order=c(5,0,5),xreg=df_new$mixed_variable,include.mean = TRUE)
# tsdisplay(df_new$V)
# model$coef
# model = auto.arima(R,xreg = data.frame(mixed_variable))
# seq_of_res=c()
# for (p in c(1)){
#   for (q in c(1)){
#     for (P in c(0,1,2,3,4,5)){
#       for (Q in c(0,1,2,3,4,5)){
#         for (include.mean in c(TRUE,FALSE)){
#           for (arfima in c(TRUE,FALSE)){
#             if ( p==q && p==0){
#               next
#             }
#             g1=ugarchspec(variance.model = list(model = "sGARCH",
#                                                 garchOrder = c(p, q),
#                                                 submodel = NULL,
#                                                 external.regressors = NULL,
#                                                 variance.targeting = FALSE),
#                           mean.model  = list(armaOrder = c(P,Q),
#                                              arfima =arfima,include.mean = include.mean,
#                                              external.regressors = matrix(df_new$mixed_variable)),
#                           distribution.model = "std")
#             g1fit=ugarchfit(g1,data=qxts$R)
#             print(c(infocriteria(g1fit)[2],P,Q,include.mean,arfima))
#             seq_of_res<-c(seq_of_res,c(infocriteria(g1fit)[2],P,Q,include.mean,arfima))
#           }
#         }
#       }
#     }
#   }
# }
g1=ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1,1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model  = list(armaOrder = c(1,1),
arfima =TRUE,include.mean = FALSE,
external.regressors = as.matrix(df_new[,c(2)])),
distribution.model = "std")
g1fit=ugarchfit(g1,data=qxts$R_Bitcoin)
g1fit
windows()
tsdisplay(qxts$R_Bitcoin)
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(rugarch)
df=read.csv('df_prepared_for_multiple_analysis.csv')
df$date=as.POSIXct(as.Date(df$date))
df_new=df[seq(51,dim(df)[1],1),]
# df_new=as.matrix(df_new)
qxts <- xts(df_new[,-1], order.by=as.POSIXct(df_new$date))
colnames(qxts)
tsdisplay(df_new$RV_Ripple)
# model = auto.arima(df_new$R,xreg = df_new$mixed_variable,
#                    max.p = 7,
#                    max.q = 7,stepwise = FALSE)
# arima(df_new$R,order=c(5,0,5),xreg=df_new$mixed_variable,include.mean = TRUE)
# tsdisplay(df_new$V)
# model$coef
# model = auto.arima(R,xreg = data.frame(mixed_variable))
# seq_of_res=c()
# for (p in c(1)){
#   for (q in c(1)){
#     for (P in c(0,1,2,3,4,5)){
#       for (Q in c(0,1,2,3,4,5)){
#         for (include.mean in c(TRUE,FALSE)){
#           for (arfima in c(TRUE,FALSE)){
#             if ( p==q && p==0){
#               next
#             }
#             g1=ugarchspec(variance.model = list(model = "sGARCH",
#                                                 garchOrder = c(p, q),
#                                                 submodel = NULL,
#                                                 external.regressors = NULL,
#                                                 variance.targeting = FALSE),
#                           mean.model  = list(armaOrder = c(P,Q),
#                                              arfima =arfima,include.mean = include.mean,
#                                              external.regressors = matrix(df_new$mixed_variable)),
#                           distribution.model = "std")
#             g1fit=ugarchfit(g1,data=qxts$R)
#             print(c(infocriteria(g1fit)[2],P,Q,include.mean,arfima))
#             seq_of_res<-c(seq_of_res,c(infocriteria(g1fit)[2],P,Q,include.mean,arfima))
#           }
#         }
#       }
#     }
#   }
# }
g1=ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1,1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model  = list(armaOrder = c(1,1),
arfima =TRUE,include.mean = FALSE,
external.regressors = as.matrix(df_new[,c(2)])),
distribution.model = "std")
g1fit=ugarchfit(g1,data=qxts$R_Bitcoin)
g1fit
c(infocriteria(g1fit)
infocriteria(g1fit)
infocriteria(g1fit)
armaOrder = c(1,1)
armaOrder
matrix(df_new[,c(2)])
g1=ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1,1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model  = list(armaOrder = c(1,1),
arfima =TRUE,include.mean = FALSE,
external.regressors = matrix(df_new[,c(2)])),
distribution.model = "std")
g1fit=ugarchfit(g1,data=qxts$R_Bitcoin)
g1fit
windows()
plot(g1fit,which='all')
