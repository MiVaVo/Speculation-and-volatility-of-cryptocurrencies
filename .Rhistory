ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_color_manual(labels = c("Доходность BTC","Доходность BTC", "T888"))
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_color_manual(labels = c("Доходность BTC","Доходность BTC", "T888"))
plot_obj
scale_color_manual(labels = c("Доходность BTC","Доходность BTC", "T888"))
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("Control", "Treatment 1", "Treatment 2"))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Plot of length \n by dose")
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Plot of length by dose")
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Plot of length by dose")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.5))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.001, fillGroupDensity=TRUE)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.5))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.5))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=1, fillGroupDensity=TRUE)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
custom <- function(x) {dt(x - 3, 1.5)}
ggplot(data.frame(x = c(-4, 10)), aes(x = x)) +
stat_function(fun = custom)
custom <- function(x) {dt(x, 2)}
ggplot(data.frame(x = c(-4, 10)), aes(x = x)) +
stat_function(fun = custom)
custom <- function(x) {dt(x, 2)}
custom
custom <- function(x) {dt(x, 2)}
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))+stat_function(fun = custom)
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.histogram(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
custom <- function(x) {dt(x, 2)}
ggplot(data.frame(x = c(-4, 10)), aes(x = x)) +
stat_function(fun = custom)
custom <- function(x) {dt(x, 12)}
ggplot(data.frame(x = c(-4, 10)), aes(x = x)) +
stat_function(fun = custom)
custom <- function(x) {dt(x, 1111)}
ggplot(data.frame(x = c(-4, 10)), aes(x = x)) +
stat_function(fun = custom)
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5,adjust=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5,adjust=0.5, aes(y=..density..), fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5,adjust=0.5, aes(y=..density..), fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
..density..
aes(y=..density..)
ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5,adjust=0.5, aes(y=..density..), fillGroupDensity=TRUE)
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5,aes(y=..density..), fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=ggplot(data=melt(df_R, id.vars=c("date")),
aes(x, fill='variable', colour='variable')) +
geom_density(alpha=0.4, lwd=0.8, adjust=0.5)
plot_obj
x
melt(df_R, id.vars=c("date"))
plot_obj=ggplot(data=melt(df_R, id.vars=c("date")),
aes(x, fill=variable, colour=variable)) +
geom_density(alpha=0.4, lwd=0.8, adjust=0.5)
plot_obj
plot_obj=ggplot(data=melt(df_R, id.vars=c("date")),
aes(x, fill=variable, colour=variable)) +
geom_density(alpha=0.4, lwd=0.8, adjust=0.5)
plot_obj
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(lmtest)
library(ggplot2)
library(rugarch)
source('funcs.R')
library(reshape2)
install.packages("devtools")
library(devtools)
install_github("easyGgplot2", "kassambara")
library(easyGgplot2)
# 1. Prepare overall data
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
custom <- function(x) {dt(x, 1111)}
ggplot(data.frame(x = c(-4, 10)), aes(x = x)) +
stat_function(fun = custom)
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
custom <- function(x) {dt(x, 1111)}
ggplot(data.frame(x = c(-4, 10)), aes(x = x)) +
stat_function(fun = custom)
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "LEFT", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
melt(df, id.vars=c("date"))
df_R=df[sapply( colnames(df) ,function(i)(grepl('R_' , i) || grepl('date' , i) ))]
plot_obj=ggplot2.density(data=melt(df_R, id.vars=c("date")), xName='value', groupName='variable',
# legendPosition="top",
alpha=0.5, fillGroupDensity=TRUE)+stat_function(fun = custom)+
xlab("Значение доходности") +theme(plot.title = element_text(hjust = 0.75))+
ylab("Плотность")
plot_obj=plot_obj+xlim(-0.25,0.25)
plot_obj=plot_obj+ guides(fill = guide_legend(title = "Криптовалюты", title.position = "left"))+
scale_fill_discrete(labels=c("BTC", "Ethereum", "Ripple"))+ ggtitle("Плотности распределения доходности криптовалют")+
theme(plot.title = element_text(hjust = 0.5))
plot_obj
g1fit
save(g1fit, file = paste(cryptos,'GARCH_model.rds',sep=''))
paste(cryptos,'GARCH_model.rds',sep='_')
save(g1fit, file = paste('/saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep=''))
paste(cryptos,'GARCH_model.rds',sep='_')
paste('/saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep='')
save(g1fit, file = paste('saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep=''))
library(forecast)
library(quantmod)
library(timeSeries)
library(tseries)
library(xts)
library(lmtest)
library(rugarch)
source('funcs.R')
# 1. Prepare overall data
df=read.csv('datasets_created_python/merged_all.csv')
df$date=as.POSIXct(as.Date(df$date))
df=df[seq(51,dim(df)[1],1),]
summary(df)
crypto_abr=c('BTC','ETH','XRP')
fits_of_garch=list()
cor(df[,-1])
models_all=list()
# 2. Loop over all currencies and calculate volatility, that was associated with speculative processes
tsdisplay(y_here)
for (cryptos in crypto_abr){
# cryptos='BTC'
print(cryptos)
steping=dim(df)[1]-1
for (i in seq(1,dim(df)[1]-steping,steping)){
if (cryptos=='XRP'){
garch_mdel=list(model = "csGARCH",# external.regressors = as.matrix(ext_regressor_here),
garchOrder = c(1,1))
}
else{
garch_mdel=list(model = "sGARCH",# external.regressors = as.matrix(ext_regressor_here),
garchOrder = c(1,1))
}
dates=df_new[,grepl('date', colnames(df_new))]
df_new=df[seq(i,i+steping,1),]
# 2.1 Prepare dep.variable y, that will be used in ARMAX-GARCH model
y_here=df_new[,grepl(paste('R_',cryptos,sep=''), colnames(df_new)) | grepl('date', colnames(df_new)) ]
y_here <- xts(y_here[,-1], order.by=as.POSIXct(y_here$date))
# 2.2 Prepare exogenious variable, that will be used in ARMAX part of ARMAX-GARCH model
ext_regressor_here=df_new[,grepl(paste('RV_',cryptos,sep=''), colnames(df_new))]
# 2.3 Describe ARMAX(1,1)-GARCH(1,1) model
g1=ugarchspec(variance.model = garch_mdel,
mean.model  = list(armaOrder = c(1,0), external.regressors = as.matrix(ext_regressor_here),
include.mean = TRUE),
# mean.model  = list(external.regressors = as.matrix(df_new[,c(2)])),
distribution.model = "std")
# 2.4 Fit model with appropriate solvers
g1fit=ugarchfit(g1,data=y_here,solver='hybrid')
save(g1fit, file = paste('saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep=''))
models_all<-append(models_all,list(g1fit))
# 2.5 Prepare dataset for GARCH regression
df_to_reg=cbind(g1fit@fit$sigma,ext_regressor_here)
colnames(df_to_reg)=c(paste('sigma_',cryptos,sep=''),paste('RV_',cryptos,sep=''))
df_to_reg=as.data.frame(df_to_reg)
# 2.6 Fit regression model GARCH(1,1)~b0+b1*Speculation , where Speculation is the measure of speculation
# as described in 'Blau M. Price dynamics and speculative trading in bitcoinBenjamin,2017'
# and is based on 'Guillermo L. Dynamic Volume-Return Relation of Individual Stocks,2000'
m1<-lm(df_to_reg[,1]~df_to_reg[,2],data = df_to_reg)
print(summary(m1))
# 2.7 Save volatility of a given cryptocyrrency, that is associated (caused by) with speculation
fits_of_garch=append(fits_of_garch,list(m1$fitted.values))
}
}
# 3 . Conduct Granger casuality test to test the H0, which is as follows:
# Volatility, associated  with speculative processes on cryptocurrency X cause ( based on granger test)
# speculative volatility on cryptocurrency Y, where X and Y are currencies from c('BTC','ETH','XRP')
# 3.1. BTC -> ETH
grangertest(log(unlist(fits_of_garch[2])) ~ log(unlist(fits_of_garch[1])), order = 3) #0.194 H0 rejected #0.16
# 3.2. ETH -> BTC
grangertest(log(unlist(fits_of_garch[1])) ~ log(unlist(fits_of_garch[2])), order = 3) #0.001692 ** H0 not rejected  0.001936 **
# 3.3. BTC -> XRP
grangertest(log(unlist(fits_of_garch[3])) ~ log(unlist(fits_of_garch[1])), order = 3) #0.8227 H0 rejected
# 3.4. XRP -> BTC
grangertest(log(unlist(fits_of_garch[1])) ~ log(unlist(fits_of_garch[3])), order = 3) #0.8551 H0 rejected
# 3.3. ETH -> XRP
grangertest(log(unlist(fits_of_garch[3])) ~ log(unlist(fits_of_garch[2])), order = 3) #0.03617 * H0 not rejected
# 3.4. XRP -> ETH
grangertest(log(unlist(fits_of_garch[2])) ~ log(unlist(fits_of_garch[3])), order = 3) # 0.6793 H0 rejected
cryptos
# 3. plot distributions
######################### 1. Visualize returns
lapply(c('BTC','ETH','XRP'),load(paste('saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep='')))
cryptos
load(paste('saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep=''))
paste('saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep='')
# 3. plot distributions
######################### 1. Visualize returns
lapply(c('BTC','ETH','XRP'),function(cryptos) (load(paste('saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep=''))))
# 3. plot distributions
######################### 1. Visualize returns
btc_eth_xrp_garch=lapply(c('BTC','ETH','XRP'),function(cryptos) (load(paste('saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep=''))))
plot(btc_eth_xrp_garch[[1]],which='all')
btc_eth_xrp_garch[[1]]
g1fit
list.save(g1fit, file = paste('saved_models/',paste(cryptos,'GARCH_model.rds',sep='_'),sep=''))
